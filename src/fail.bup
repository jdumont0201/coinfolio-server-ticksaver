extern crate ws;
extern crate serde;
extern crate serde_json;
extern crate json;
extern crate clap;

use clap::{Arg, App, SubCommand};
use std::sync::{Arc, Mutex};

use std::rc::Rc;
use std::cell::Cell;

#[macro_use]
extern crate serde_derive;
extern crate chrono;
use std::collections::HashMap;
use std::fs::File;
use std::fs::OpenOptions;
use std::io::BufWriter;
use ws::{connect, Handler, Sender, Handshake, Result, Message, CloseCode, Response};
use std::thread;
use chrono::prelude::*;
use chrono::{DateTime, TimeZone, NaiveDateTime, Utc};
use chrono::{NaiveDate, NaiveTime};
mod broker {
    use std::io::Write;
    use std::fs::OpenOptions;
    use super::Client;
    use std::env;

    pub fn get_path(broker_name: &str, symbol: &str, interval: &str) -> String {
        let args: Vec<_> = ::std::env::args().collect();
        let path = &args[1];
        println!("Data folder: {} ", path);

        let mut s = path.to_owned();

        s.push_str(broker_name);
        s.push_str("-");
        if (interval.len() > 0) {
            s.push_str(interval);
            s.push_str("-");
        }
        s.push_str(symbol);
        s.push_str(".csv");
        s
    }

    pub fn get_url(pair: String) -> String {
        let mut s = "wss://stream.binance.com:9443/ws/".to_owned();
        let pairl = pair.to_lowercase();
        s.push_str(&pairl);
        s.push_str("@kline_1m");
        s
    }

    #[derive(Serialize, Deserialize)]
    pub struct RawTick {
        B: String,
        L: i64,
        Q: String,
        T: i64,
        V: String,
        c: String,
        f: i64,
        h: String,
        i: String,
        l: String,
        n: i64,
        o: String,
        q: String,
        s: String,
        t: i64,
        pub v: String,
        pub x: bool,
    }

    #[derive(Serialize, Deserialize)]
    pub struct OHLC {
        E: i64,
        e: String,
        pub k: RawTick,
        pub  s: String,
    }

    impl OHLC {

        fn get_open(&self) -> &String {
            &((&self).k.o)
        }
        fn get_tick_content(&self) -> String {
            let mut owned_str: String = "".to_owned();
            owned_str.push_str(&self.E.to_string());
            owned_str.push_str(",");
            owned_str.push_str(&self.k.c);
            owned_str.push_str(",");
            owned_str.push_str(&self.k.v);
            owned_str.push_str("\n");
            owned_str
        }
        fn get_1m_content(&self, self2: &mut Client) -> String {
            let mut owned_str: String = "".to_owned();
            owned_str.push_str(&self.k.t.to_string());
            owned_str.push_str(",");
            owned_str.push_str(&self.k.o);
            owned_str.push_str(",");
            owned_str.push_str(&self.k.h);
            owned_str.push_str(",");
            owned_str.push_str(&self.k.l);
            owned_str.push_str(",");
            owned_str.push_str(&self.k.c);
            owned_str.push_str(",");
            owned_str.push_str(&(self2.volume_1m.to_string().to_owned()));
            owned_str.push_str("\n");
            owned_str
        }
        pub fn save_1m(&self, self2: &mut Client) {
            let file = OpenOptions::new().write(true).create(true).append(true).open(&self2.path_1m);
            let mut content_1m = &self.get_1m_content(self2);
            println!("save 1m {} {}", self2.name, content_1m);
            if let Ok(mut filed) = file {
                let mut s = content_1m.as_bytes();
                filed.write_all(s).unwrap();
                self2.volume_1m = 0.;
            } else {
                self2.volume_1m = 0.;
            }
        }
        pub fn update_interval_bar(&self, self2: &mut Client, interval:u32) {
            println!("update {}",interval);
            use chrono::Timelike;
            let ts=self.k.t;


            let dt=::chrono::NaiveDateTime::from_timestamp(ts/1000, 0);//::chrono::DateTime::<::chrono::Utc>::from_utc( ::chrono::NaiveDateTime::from_timestamp(ts, 0), ::chrono::Utc);
            let min=dt.minute();
            let rem=min % interval;
            if rem == interval -1 {
                println!("save min {} {} {} {}", ts,dt,min,rem);
            }else{
                println!("min {} {} {} {}", ts,dt,min,rem);
            }
        }
        pub fn save(&self, self2: &mut Client) {
            match (self2).writer {
                Some(ref mut w) => {
                    let mut owned_str = &self.get_tick_content();
                    println!("add to buff {}", self2.buffer_level);
                    w.write_all(owned_str.as_bytes()).unwrap();
                    self2.buffer_level = self2.buffer_level + 1;
                    if self2.buffer_level >= self2.buffer_max {
                        println!("writing {}", self2.name);
                        w.flush().unwrap();
                        self2.buffer_level = 0;
                    }
                }
                None => {
                    println!("created buffer not exisitgng");
                }
            }

            if (self.k.x) {//isfinal
              //  self2.nbUpdated.insert(self2.name.to_string(),2);
                //println!("updated {:?}",self2.nbUpdated);
                &self.update_interval_bar(self2,5);
                &self.save_1m(self2);

                self2.volume_1m = 0.;
            }
        }
    }
}

fn create_tick_bufwriter(filename: &String) -> Result<BufWriter<File>> {
    println!("create buffer filename={}", filename);
    let file = OpenOptions::new().write(true).create(true).append(true).open(&filename);
    match file {
        Ok(filed) => {
            println!("create file ok");
            let mut w = BufWriter::new(filed);
            println!("create file ok buffwrtier");
            Ok(w)
        }
        Err(err) => {
            println!("create file err");
            panic!("called `Result::unwrap()` on an `Err` value: {:?}", err);
        }
    }
}


pub struct Client{
    out: Sender,
    writer: Option<BufWriter<File>>,
    name: String,
    buffer_level: u8,
    buffer_max: u8,
    path_tick: String,

    volume_1m: f64,
    path_1m: String,
 //   data: Vec<usize>,
    volume_5m:f64,
    path_5m:String,
    //count:Rc<Cell<u32>>
    nbUpdated: HashMap<String,usize > //Vec<usize>
    //nbUpdated:std::sync::Arc<Mutex<Vec<usize >>>//u32//std::sync::MutexGuard//MutexGuard//&usize

}

impl Handler for Client {
    fn on_open(&mut self, _: Handshake) -> Result<()> {
        println!("Open ws");
        self.path_tick = broker::get_path("binance", &self.name, "tick");
        self.path_1m = broker::get_path("binance", &self.name, "1m");
        self.path_5m = broker::get_path("binance", &self.name, "5m");
        println!("Save path {}", &self.path_tick);

        let w = create_tick_bufwriter(&self.path_tick);
        if let Ok(wr) = w {
            self.writer = Some(wr);
        } else {}
        self.out.send("Hello WebSocket")
    }

    fn on_error(&mut self, err: ws::Error) {
        println!("err {}", err);
    }
    fn on_response(&mut self, _res: &Response) -> Result<()> {
        self.out.send("Hello WebSocket res")
    }
    fn on_message(&mut self, msg: Message) -> Result<()> {
        let m = msg.as_text().unwrap();
        let v: broker::OHLC = serde_json::from_str(m).unwrap();
            println!("msg {} {}", v.s,v.k.v);

        //parse for later addition
        let vol=v.k.v.parse::<f64>().unwrap();
        self.volume_1m = self.volume_1m + vol;
        self.volume_5m= self.volume_5m + vol;
        v.save(self);
        //println!("msg {}", v.s);
        self.out.close(CloseCode::Normal)
    }
}

fn main() {

    let mut children = vec![];
    //let pairs = vec!["ETHUSDT","BTCUSDT","BNBUSDT","NEOUSDT","LTCUSDT","BBCUSDT"];
    let pairs = vec!["ETHBTC", "LTCBTC", "BNBBTC", "NEOBTC", "123456", "QTUMETH", "EOSETH", "SNTETH", "BNTETH", "BCCBTC",
                     "GASBTC", "BNBETH", "BTCUSDT", "ETHUSDT", "HSRBTC", "OAXETH", "DNTETH", "MCOETH", "ICNETH", "MCOBTC",
                     "WTCBTC", "WTCETH", "LRCBTC", "LRCETH", "QTUMBTC", "YOYOBTC", "OMGBTC", "OMGETH", "ZRXBTC", "ZRXETH",
                     "STRATBTC", "STRATETH", "SNGLSBTC", "SNGLSETH", "BQXBTC", "BQXETH", "KNCBTC", "KNCETH", "FUNBTC",
                     "FUNETH", "SNMBTC", "SNMETH", "NEOETH", "IOTABTC", "IOTAETH", "LINKBTC", "LINKETH", "XVGBTC"

                /*     , "XVGETH", "CTRBTC", "CTRETH", "SALTBTC", "SALTETH", "MDABTC", "MDAETH", "MTLBTC", "MTLETH",
                     "SUBBTC", "SUBETH", "EOSBTC", "SNTBTC", "ETCETH", "ETCBTC", "MTHBTC", "MTHETH", "ENGBTC",
                     "ENGETH", "DNTBTC", "ZECBTC", "ZECETH", "BNTBTC", "ASTBTC", "ASTETH", "DASHBTC", "DASHETH",
                     "OAXBTC", "ICNBTC", "BTGBTC", "BTGETH", "EVXBTC", "EVXETH", "REQBTC", "REQETH", "VIBBTC",
                     "VIBETH", "HSRETH", "TRXBTC", "TRXETH", "POWRBTC", "POWRETH", "ARKBTC", "ARKETH", "YOYOETH",

                     "XRPBTC", "XRPETH", "MODBTC", "MODETH", "ENJBTC", "ENJETH", "STORJBTC", "STORJETH", "BNBUSDT",
                     "VENBNB", "YOYOBNB", "POWRBNB", "VENBTC", "VENETH", "KMDBTC", "KMDETH", "NULSBNB", "RCNBTC",
                     "RCNETH", "RCNBNB", "NULSBTC", "NULSETH", "RDNBTC", "RDNETH", "RDNBNB", "XMRBTC", "XMRETH",
                     "DLTBNB", "WTCBNB", "DLTBTC", "DLTETH", "AMBBTC", "AMBETH", "AMBBNB", "BCCETH", "BCCUSDT",
                     "BCCBNB", "BATBTC", "BATETH", "BATBNB", "BCPTBTC", "BCPTETH", "BCPTBNB", "ARNBTC", "ARNETH",

                     "GVTBTC", "GVTETH", "CDTBTC", "CDTETH", "GXSBTC", "GXSETH", "NEOUSDT", "NEOBNB", "POEBTC",
                     "POEETH", "QSPBTC", "QSPETH", "QSPBNB", "BTSBTC", "BTSETH", "BTSBNB", "XZCBTC", "XZCETH",
                     "XZCBNB", "LSKBTC", "LSKETH", "LSKBNB", "TNTBTC", "TNTETH", "FUELBTC", "FUELETH", "MANABTC",
                     "MANAETH", "BCDBTC", "BCDETH", "DGDBTC", "DGDETH", "IOTABNB", "ADXBTC", "ADXETH", "ADXBNB",
                     "ADABTC", "ADAETH", "PPTBTC", "PPTETH", "CMTBTC", "CMTETH", "CMTBNB", "XLMBTC", "XLMETH",

                     "XLMBNB", "CNDBTC", "CNDETH", "CNDBNB", "LENDBTC", "LENDETH", "WABIBTC", "WABIETH",
                     "WABIBNB", "LTCETH", "LTCUSDT", "LTCBNB", "TNBBTC", "TNBETH", "WAVESBTC", "WAVESETH",
                     "WAVESBNB", "GTOBTC", "GTOETH", "GTOBNB", "ICXBTC", "ICXETH", "ICXBNB", "OSTBTC",
                     "OSTETH", "OSTBNB", "ELFBTC", "ELFETH", "AIONBTC", "AIONETH", "AIONBNB", "NEBLBTC",
                     "NEBLETH", "NEBLBNB", "BRDBTC", "BRDETH", "BRDBNB", "MCOBNB", "EDOBTC", "EDOETH",
*/
  ,                   "WINGSBTC", "WINGSETH", "NAVBTC", "NAVETH", "NAVBNB", "LUNBTC", "LUNETH", "TRIGBTC",
                     "TRIGETH", "TRIGBNB", "APPCBTC", "APPCETH", "APPCBNB", "VIBEBTC", "VIBEETH", "RLCBTC",
                     "RLCETH", "RLCBNB", "INSBTC", "INSETH", "PIVXBTC", "PIVXETH", "PIVXBNB", "IOSTBTC", "IOSTETH"
    ];
    //let pairs = vec!["ETHUSDT"];

    let nb=pairs.len();
    let mut c: HashMap<String,usize >  =HashMap::new();//Vec::with_capacity(nb);//(0..nb).collect();
    let mut v: Vec<usize >  =Vec::with_capacity(nb);//(0..nb).collect();
    for i in 0..nb{
        c.insert(pairs.get(i).unwrap().to_string(),0);
        v.push(0);
    }
    println!("{:?}",c);
    let data = Arc::new(Mutex::new(Some(c)));
    let count = Rc::new(Cell::new(0));


    let client_data = v.clone();

    for p in pairs.iter() {
        let pp = p.clone();
        let dataa=data.clone();
        children.push(thread::spawn(move || {
            let url = broker::get_url(pp.to_string());
            println!("Launching thread {} {}", pp.to_string(),url);



            let da=dataa.lock();
            match da {
                Ok(mut daa) => {
                    println!("Connect");


                    let t=daa.take();
                    match t {
                        Some(mut tt) => {
                            println!("Connect OK");
/*                        let res=
                            connect(url, |out| Client {
                                out: out,
                                name: pp.to_string(),
                                path_tick: "".to_string(),

                                buffer_level: 0,
                                buffer_max: 20,

                                path_1m: "".to_string(),
                                volume_1m: 0.,

                                path_5m: "".to_string(),
                                volume_5m: 0.,
                                //count: count.clone(),
                                writer: None,
                                //data: client_data.clone(),
                                nbUpdated: daa.take().unwrap()
                            });
                        match res {
                            Ok(mut r)=>{
                                println!("ok")
                            },Err(e)=>{
                                println!("Errr {}",e);
                            }
                        }*/
                        },
                        None => {
                            println!("err none");
                        }
                    }

                },
                Err(e) => {
                    println!("err {}", e);
                }
            }

        }));
    }
    for child in children {
        let _ = child.join();
    }
}